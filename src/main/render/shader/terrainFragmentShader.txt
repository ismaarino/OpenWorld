#version 400 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in vec4 toShadowSpace;

in float visibility;

in vec4 shadowCords;

out vec4 out_Color;

uniform sampler2D shadowMap;


uniform sampler2D modelTexture;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;

uniform vec3 skyColour;

const int pcfCount = 3;
const float totalTexels = (pcfCount*2.0*1.0)*(pcfCount*2.0+1.0);

void main(void){
/*
	float mapSize = 4096.0;
	float texelSize = 1.0/mapSize;
	float total = 0.0;
	float objectNearestLight;
	for(int y=-pcfCount;y<=pcfCount;y++){
		for(int x=-pcfCount;x<=pcfCount;x++){
			objectNearestLight = texture(shadowMap, shadowCords.xy+vec2(x, y)*textelSize).r;
			
		}
	}*/
	
	float objectNearestLight = texture(shadowMap,shadowCords.xy).r;
	float lightFactor = 1.0;
	if(shadowCords.z>objectNearestLight){
		lightFactor = 1.0-0.4;
	}

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal,unitLightVector);
	float brightness = max(nDotl,0.2);
	vec3 diffuse = (brightness * lightColour) * lightFactor;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	

	out_Color =  vec4(diffuse,1.0) * texture(modelTexture,pass_textureCoordinates) + vec4(finalSpecular,1.0);
	out_Color = mix(vec4(skyColour,1.0),out_Color,visibility);
}